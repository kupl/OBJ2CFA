ICSEInvocation1(?invocation)->MethodInvocationRef(?invocation).



ICSEInvocation(?invocation) <-
  MyInvocation(?invocation),
  MethodInvocationRef(?invocation).

/*
ICSEInvocation(?invocation) <-
  ICSEInvocation1(?invocation),
  MethodInvocationRef(?invocation).
*/
F1(?invocation)->MethodInvocationRef(?invocation).
F2(?invocation)->MethodInvocationRef(?invocation).



DD(?invo)<-
  ThisCall(?invo).

/*
MD(?invo)<-
  !MyInvocation(?invo),
  ThisCall(?invo).
*/

/*DD(?invo)<-
  MyInvocation(?invo),
  FieldCall(?invo).


DD(?invo)<-
  MyInvocation(?invo),
  ParamCall(?invo).
*/


ContainParam(?invo) <-
  ActualParam[_,?invo] = _.

//ContainParam(?invo) <-
//  ActualParamN[_,?invo] = _.


InitInInit(?invocation)<-
  string:like(?inmethod,"%<init>%"),
  string:like(?tomethod,"%<init>%"),
  SpecialMethodInvocation:Signature[_] = ?inmethod,
  SpecialMethodInvocation:Signature[?invocation] = ?tomethod,
  SpecialMethodInvocation:In(?invocation,?inmethod).


//ICSEInvocation(?invocation) <-
//  InitInInit(?invocation).


VoidInvocation(?invocation)<-
  !ContainParam(?invocation),
  ThisCall(?invocation).

//ICSEInvocation1(?invocation)<-
//  VoidInvocation(?invocation).

ICSEInvocation1(?invocation),F1(?invocation) <-
  //!Left(?invocation),
  //MyInvocation(?invocation),
  //!Left(?invocation),
  //!ClassLoader(?invocation),
  !Feature14(?invocation),
  Feature2(?invocation),
  Feature13(?invocation),
  Feature25(?invocation),
  Feature31(?invocation),
  
  Feature47(?invocation),
  Feature28(?invocation),
  Feature26(?invocation),
  Feature11(?invocation),
  Feature5(?invocation),
  Feature0(?invocation),
  Feature37(?invocation).//No alloc

/*
ICSEInvocation1(?invocation) <-
  Feature2(?invocation),
  //Feature18(?invocation),
  Feature0(?invocation).//ParamCall
*/

/*
ICSEInvoaction1(?invocation) <-
  MyInvocation(?invocation),
  //Feature33(?invocation),
  Feature40(?invocation).//This call
ICSEInvocation1(?invocation) <-
  MyInvocation(?invocation),
  //Feature33(?invocation),
  Feature42(?invocation).//FieldCall
ICSEInvocation1(?invocation) <-
  MyInvocation(?invocation),
  //Feature33(?invocation),
  Feature44(?invocation).//ParamCall
*/




MultiCalledInvo(?invo1),
MultiCalledInvo(?invo2)<-
  SpecialMethodInvocation:Signature[?invo1] = ?sig,
  SpecialMethodInvocation:Signature[?invo2] = ?sig,
  ?invo1 != ?invo2,
  Invocation:In[?invo1] = ?meth,
  Invocation:In[?invo2] = ?meth.

MultiCalledInvo(?invo1),
MultiCalledInvo(?invo2)<-
  VirtualMethodInvocation:Signature[?invo1] = ?sig,
  VirtualMethodInvocation:Signature[?invo2] = ?sig,
  ?invo1 != ?invo2,
  Invocation:In[?invo1] = ?meth,
  Invocation:In[?invo2] = ?meth.



ICSEInvocation(?invocation) <-
  !ScalableInvocation(?invocation),
  ThisCall(?invocation),
  !Left2(?invocation),
  MethodInvocationRef(?invocation).


ICSEInvocation1(?invocation),F2(?invocation) <-
  //MyInvocation(?invocation),
  !ResourceBundle(?invocation),
  !StaticFieldCall(?invocation),
  //!Left2(?invocation),
  !MultiCalledInvo(?invocation),
  !ScalableInvocation(?invocation),
  
  !ProtectedCall(?invocation),
  //!ProtectedCall(?invocation),
  //!TargetPrecision(?invocation),
  //!ResourceBundle(?invocation),
  //ManyClassInvocation(?invocation),
  //!PrecisionInvocation(?invocation),
  //!ResourceBundle(?invocation),
  Feature28(?invocation),
  Feature26(?invocation),
  Feature17(?invocation),
  Feature11(?invocation),
  Feature5(?invocation),
  Feature0(?invocation),
  Feature14(?invocation).//util

ICSEInvocation1(?invocation) <-  //Fixed
  Feature0(?invocation),
  Feature5(?invocation),
  Feature11(?invocation),
  Feature17(?invocation),
  //MyInvocation(?invocation),
  //SuspectInvo(?invocation),
  Feature14(?invocation),//util
  Feature47(?invocation),//FreshCall
  Feature32(?invocation).//StaticCall


//////////////////////////////////////////////
StaticFieldCall(?invocation) <-
  StaticFieldBase(?base),
  VirtualMethodInvocation:Base[?invocation] = ?base.

StaticFieldCall(?invocation) <-
  StaticFieldBase(?base),
  SpecialMethodInvocation:Base[?invocation] = ?base.



StaticFieldBase(?to) <-
  StaticFieldBase(?from),
  AssignLocal(?from, ?to, _).


StaticFieldBase(?to)<-
  LoadStaticField(_, ?to, _).
/////////////////////////////////////////////


/////ResourceBundleInvo

ResourceBundle(?invocation)<-
  Feature20(?invocation),
  ManyClassInvocation(?invocation).

PrivateMethod(?meth), PrivateCall(?invo)<-
  Invocation:In[?invo] = ?meth,
  string:like(?mod,"%private%"),
  MethodModifier(?mod,?meth).

PublicMethod(?meth)<-
  string:like(?mod,"%public%"),
  MethodModifier(?mod,?meth).


/////
ProtectedMethod(?meth), ProtectedCall(?invo)<-
  Invocation:In[?invo] = ?meth,
  string:like(?mod,"%protected%"),
  MethodModifier(?mod,?meth).


CastInvocation(?invocation) <-
  Invocation:In[?invocation] = ?inmethod,
  AssignCast(_, _, _, ?inmethod).

PrecisionInvocation(?invoaction) <-
  CastInvocation(?invocation),
  Feature20(?invocation),
  ManyClassInvocation(?invocation),
  ExceptionInvocation(?invoaction).



ScalableInvocation(?invocation) <-
  ExceptionInvocation(?invocation),
  ThisCall(?invocation),
  ManyClassInvocation(?invocation).

ExceptionInvocation(?invocation) <-
  ExceptionHandler:Method(_,?meth),
  Invocation:In[?invocation] = ?meth.

ManyClassInvocation(?invocation) <-
  Invocation:In[?invocation] = ?meth,
  ManyMethodClass(?class),
  MethodDeclaringClass[?meth] = ?class.


ManyMethodClass(?class) <-
  ClassMethodCounts[?class] = ?cnt,
  ?cnt > 20. 

TargetPrecision(?invo) <-
  //Feature21(?invo),
  //Feature18(?invo),
  //Feature30(?invo),
  ExceptionInvocation(?invo),
  ManyInvoMethod(?invo).


ManyInvoMethod(?invo) <-
  Invocation:In[?invo] = ?meth,
  ?n > 9,
  InvoMethodCounts[?meth] = ?n.


InvoMethodCounts[?meth] = ?n <-
   agg<<?n = count()>> Invocation:In[_] = ?meth.


ResourceBundle(?invocation)<-//GotYou
  Feature20(?invocation),
  ManyClassInvocation(?invocation),
  //string:like(?invocation,"%java.util.ResourceBundle$CacheKey%"),
  MethodInvocationRef(?invocation).



ManyHeapAndException(?invo)<- 
  //ExceptionInvocation(?invo),
  Invocation:In[?invo] = ?meth,
  ManyHeapMeth(?meth).

ManyHeapMeth(?meth) <-
  MethHeapCnt[?meth] = ?n,
  ?n > 5.


MethHeapCnt[?meth] = ?n <-
  agg<<?n = count()>> AssignHeapAllocation(_,_,?meth).















