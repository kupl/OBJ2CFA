#include "../library/fact-macros.logic"

// For this analysis, every heap context recorded on allocation
// corresponds to the calling context of the allocator method.
// Subtle point: this may need to be created because even though it
// exists as a Context it may not exist as an HContext.
#define RecordMacro(ctx, heap, hctx) \
  HContext(hctx), \
  HContextFromRealHContext[RealContextFromContext[ctx]] = hctx
  //HContextFromRealHContext[ImmutableInvValue[]] = hctx

#define RecordImmutableMacro(ctx, heap, immCtx) \
  HContext(immCtx), \
  HContextFromRealHContext[ImmutableInvValue[]] = immCtx


#define ContextMadeIn(invocation, heap, method) \
  NormalHeapMethod[heap] = method 



#define MergeMacroNormal(callerCtx, invocation, hctx, heap, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[invocation] = calleeCtx
  //ContextFromRealContext[heap] = calleeCtx

#define MergeMacroTunnel(callerCtx, invocation, hctx, heap, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[RealContextFromContext[callerCtx]] = calleeCtx
  //ContextFromRealContext[invocation] = calleeCtx
  //ContextFromRealContext[heap] = calleeCtx



#define MergeStaticMacroTunnel(callerCtx, invocation, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[RealContextFromContext[callerCtx]] = calleeCtx
  //ContextFromRealContext[invocation] = calleeCtx



#define MergeStaticMacroNormal(callerCtx, invocation, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[invocation] = calleeCtx


#define MergeThreadStartMacro(hctx, heap, callerCtx, newCtx) \
  Context(newCtx), \
  ContextFromRealContext[RealContextFromContext[callerCtx]] = newCtx

#define MergeStartupMacro(hctx, heap, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[StartupInvocation[]] = calleeCtx

#define MergeFinalizerRegisterContextMacro(callerCtx, inmethod, heap, newCtx) \
  Context(newCtx), \
  ContextFromRealContext[heap] = newCtx
