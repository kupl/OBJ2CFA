/* Bean - Making k-Object-Sensitive Pointer Analysis More Precise with Still k-Limiting
 *
 * Copyright (C) 2016 Tian Tan, Yue Li, Jingling Xue
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "../library/fact-macros.logic"

// For this analysis, every heap context recorded on allocation
// corresponds to the most significant element of the calling 
// context of the allocator method.
#define RecordMacro(ctx, heap, hctx) \
  HContext(hctx), \
  HContextFromRealHContext[BeanHContext[ctx, heap]] = hctx

#define NormalRecordMacro(ctx, heap, hctx) \
  HContext(hctx), \
  HContextFromRealHContext[RealContext2FromContext[ctx]] = hctx
  //HContextFromRealHContext[BeanHContext[ctx, heap]] = hctx


#define RecordImmutableMacro(ctx, heap, immCtx) \
  HContext(immCtx), \
  HContextFromRealHContext[ImmutableHeapValue[]] = immCtx


// For this analysis the context of a method call corresponds to the
// identity of the receiver object and the receiver object of the caller.
// Again, this may trigger creation of a new object.
#define MergeMacro(callerCtx, invocation, hctx, heap, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[RealHContextFromHContext[hctx], heap] = calleeCtx

#define MergeBasisMacro(callerCtx, invocation, hctx, heap) \
  MergeBasis(callerCtx, invocation, hctx, heap)

#define OptimizeMergeMacro(callerCtx, invocation, hctx, heap, calleeCtx) \
  OptimizeMerge[hctx, heap] = calleeCtx

// For this analysis, static calls use additionally the invocation site as a context.
#define MergeStaticMacro(callerCtx, invocation, calleeCtx) \
  Context(calleeCtx), \
  SpecialContextFromRealContext[RealContext1FromContext[callerCtx], invocation, \
                                RealContext2FromContext[callerCtx]] = calleeCtx

// MergeThreadStart, MergeStartup, and MergeFinalizerRegisterContext
// have the same logic as plain Merge for this analysis.
#define MergeThreadStartMacro(hctx, heap, callerCtx, newCtx) \
  Context(newCtx), \
  ContextFromRealContext[RealHContextFromHContext[hctx], heap] = newCtx

#define MergeStartupMacro(hctx, heap, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[RealHContextFromHContext[hctx], heap] = calleeCtx

// This is exactly equivalent to the regular merge logic, but written
// differently. At finalization, we create a new hctx, based on the
// callerCtx, and then use this new hctx as we would in regular Merge.
// The macro below does this, without referring to the new hctx (i.e.,
// using knowledge of how it is created). This is necessary because since
// the new hctx is created in the same rule, it will not yet have values
// for its inverse functions (RealHContextFromHContext), so the rule will never
// fire if done naively. The signature of the macro (which does not accept a
// hctx) is a hint for avoiding this problem.
#define MergeFinalizerRegisterContextMacro(callerCtx, inmethod, heap, newCtx) \
  Context(newCtx), \
  ContextFromRealContext[RealContext2FromContext[callerCtx], heap] = newCtx
