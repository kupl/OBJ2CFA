/**
 * Context-sensitive pointer analysis with context of 2 objects
 * (AND for static calls 1 call-site).
 *
 * @author George Kastrinis
 */

#include "macros.logic"
//#include "heuristic_ACC.logic"
//#include "feat_A.logic"
//#include "heuristic_C.logic"
//#include "feat_C.logic"
#include "feat_AC.logic"
#include "heuristic_AC.logic"
//#include "heuristic.logic"
#include "../context-sensitive.logic"
#include "../library.logic"

// In this analysis, the real context is a pair of HeapAllocationRef AND
// a MethodInvocationRef (for static calls) sometimes.
// The real heap context is a single HeapAllocationRef. Keeping mapping 
// functions is the way to handle analyses where HContext = Context 
// (since the language considers them different types).
// NOTE: Changed from HeapAllocationRef to CallGraphEdgeSourceRef
// in order to use the invocation site for static calls.


ContextFromRealContext[?heap] = ?ctx ->
  Context(?ctx), CallGraphEdgeSourceRef(?heap).
lang:skolem(`ContextFromRealContext).
// NOTE: Use the following when using both the normal (caller's) context
// and the invocation site for static calls.

RealContextFromContext[?ctx] = ?heap -> 
  Context(?ctx), CallGraphEdgeSourceRef(?heap).

RealContextFromContext[?ctx] = ?heap <- 
  ContextFromRealContext[?heap] = ?ctx.

// NOTE: Use the following when using both the normal (caller's) context
// and the invocation site for static calls.

HContextFromRealHContext[?heap] = ?hctx ->
  HContext(?hctx), CallGraphEdgeSourceRef(?heap).
lang:skolem(`HContextFromRealHContext).
RealHContextFromHContext[?hctx] = ?heap -> 
  HContext(?hctx), CallGraphEdgeSourceRef(?heap).

RealHContextFromHContext[?hctx] = ?heap <-
  HContextFromRealHContext[?heap] = ?hctx.

// Creating special immutable heap allocation constant
ImmutableHeapValue[] = ?immHeap <-
  HeapAllocationValue(?immHeap, "<<immutable>>").


// Create initial objects with their heapcontexts.
HContextFromRealHContext[?heap] = ?hctx,
HContext(?hctx),
SystemThreadGroup(?hctx, ?alloc) <-
  MySystemThreadGroup(?heap, ?alloc).

HContextFromRealHContext[?heap] = ?hctx,
HContext(?hctx),
MainThreadGroup(?hctx, ?alloc) <-
  MyMainThreadGroup(?heap, ?alloc).

HContextFromRealHContext[?heap] = ?hctx,
HContext(?hctx),
MainThread(?hctx, ?alloc) <-
  MyMainThread(?heap, ?alloc).
  
/**
 * Reachable
 */
InitialMethod(?method),
ReachableContext(?ctx, ?method),
ContextFromRealContext[?initheap] = ?ctx,
Context(?ctx)
 <-
  MainMethodDeclaration(?method),
  HeapAllocationValue(?initheap, "<<initial-context>>").

InitialMethod(?method),
ReachableContext(?ctx, ?method),
ContextFromRealContext[?startupheap] = ?ctx,
Context(?ctx)
 <-
  ImplicitReachable(?method),
  HeapAllocationValue(?startupheap, "<<jvm-startup>>").

InitialMethod(?clinit),
ReachableContext(?ctx, ?clinit),
ContextFromRealContext[?clinitheap] = ?ctx,
Context(?ctx)
 <-
  InitializedClass(?class),
  ClassInitializer[?class] = ?clinit,
  HeapAllocationValue(?clinitheap, "<<class-initialization>>").
