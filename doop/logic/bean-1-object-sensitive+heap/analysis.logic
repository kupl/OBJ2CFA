/* Bean - Making k-Object-Sensitive Pointer Analysis More Precise with Still k-Limiting
 *
 * Copyright (C) 2016 Tian Tan, Yue Li, Jingling Xue
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Context-sensitive pointer analysis with context of 1 object and a
 * context-sensitive heap abstraction. The heap contexts are computed
 * by BEAN.
 *
 */

#include "macros.logic"
#include "../context-sensitive.logic"
#include "../library.logic"

// In this analysis, the real context is a pair of HeapAllocationRefs
// and the real heap context a single HeapAllocationRef. Keeping mapping 
// functions is the way to handle analyses where HContext = Context 
// (since the language considers them different types).

ContextFromRealContext[?heap] = ?ctx ->
  Context(?ctx), HeapAllocationRef(?heap).
lang:skolem(`ContextFromRealContext).

RealContextFromContext[?ctx] = ?heap -> 
  Context(?ctx), HeapAllocationRef(?heap).

RealContextFromContext[?ctx] = ?heap <- 
  ContextFromRealContext[?heap] = ?ctx.

HeapInContext(?heap, ?ctx) ->
  HeapAllocationRef(?heap), Context(?ctx).

HeapInContext(?heap, ?ctx) <-
  AssignNormalHeapAllocationSkolemOpt(?heap, ?ctx, _).



#ifndef DISABLE_REFLECTION
HeapInContext(?heap, ?ctx) <-
  ReflectiveAssignHeapAllocation(?instruction, ?type, ?ctx, _),
  ReflectiveHeapAllocation[?instruction, ?type]  = ?heap.
#endif


BeanHContext[?ctx, ?heap] = ?heapctx ->
  Context(?ctx), HeapAllocationRef(?heap), HeapAllocationRef(?heapctx).






MBeanHContext(?heap, ?heapctx) <-
  BeanHeapContext[_, _, ?heap] = ?heapctx.



/*
//BeanHContext[?ctx, ?heap] = ?heap2 <-
BeanHContext[?ctx, ?heap] = ?heapctx <-
  HeapInContext(?heap, ?ctx),
  ContextFromRealContext[?heap1, ?heap2] = ?ctx,
  BeanHeapContext[?heap1, ?heap2, ?heap] = ?heapctx.

// Due to some special context handling of Doop, some contexts would be
// missed by BEAN. In this case, we make Doop regress to traditional
// object-sensitivity.



BeanHContext[?ctx, ?heap] = ?heap2 <-
  HeapInContext(?heap, ?ctx),
  ContextFromRealContext[?heap] = ?ctx,
  !BeanHeapContext[?heap1, ?heap2, ?heap] = _.
*/


HContextFromRealHContext[?heap] = ?hctx ->
  HContext(?hctx), HeapAllocationRef(?heap).
lang:skolem(`HContextFromRealHContext).
RealHContextFromHContext[?hctx] = ?heap -> 
  HContext(?hctx), HeapAllocationRef(?heap).

RealHContextFromHContext[?hctx] = ?heap <-
  HContextFromRealHContext[?heap] = ?hctx.

// Creating special immutable heap allocation constant
ImmutableHeapValue[] = ?immHeap <-
  HeapAllocationValue(?immHeap, "<<immutable>>").


// Create initial objects with their heapcontexts.
HContextFromRealHContext[?heap] = ?hctx,
HContext(?hctx),
SystemThreadGroup(?hctx, ?alloc) <-
  MySystemThreadGroup(?heap, ?alloc).

HContextFromRealHContext[?heap] = ?hctx,
HContext(?hctx),
MainThreadGroup(?hctx, ?alloc) <-
  MyMainThreadGroup(?heap, ?alloc).

HContextFromRealHContext[?heap] = ?hctx,
HContext(?hctx),
MainThread(?hctx, ?alloc) <-
  MyMainThread(?heap, ?alloc).

 
/**
 * Reachable
 */
ReachableContext(?ctx, ?method),
ContextFromRealContext[?initheap] = ?ctx,
Context(?ctx)
 <-
  MainMethodDeclaration(?method),
  HeapAllocationValue(?initheap, "<<initial-context>>").

ReachableContext(?ctx, ?method),
ContextFromRealContext[?startupheap] = ?ctx,
Context(?ctx)
 <-
  ImplicitReachable(?method),
  HeapAllocationValue(?startupheap, "<<jvm-startup>>").

ReachableContext(?ctx, ?clinit),
ContextFromRealContext[?clinitheap] = ?ctx,
Context(?ctx)
 <-
  InitializedClass(?class),
  ClassInitializer[?class] = ?clinit,
  HeapAllocationValue(?clinitheap, "<<class-initialization>>").
