/* Bean - Making k-Object-Sensitive Pointer Analysis More Precise with Still k-Limiting
 *
 * Copyright (C) 2016 Tian Tan, Yue Li, Jingling Xue
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "macros.logic"
#include "../library/common-delta.logic"

/**
 * Special calling contexts
 *
 * Note: the type is necessary (java.lang.String), but never used. It
 * could be anything. It also needs to be an existing type, otherwise
 * the sanity checks will barf.
 */
PlusHeapAllocationRef(?heap, "<<initial-context>>", "java.lang.String").
PlusHeapAllocationRef(?heap, "<<jvm-startup>>", "java.lang.String").
PlusHeapAllocationRef(?heap, "<<class-initialization>>", "java.lang.String").
PlusHeapAllocationRef(?heap, "<<immutable>>", "java.lang.String").

/**
 * Special objects
 */
+MySystemThreadGroup(?heap, ?alloc),
  PlusHeapAllocationRef(?heap, "<<jvm-startup>>", "java.lang.String"),
  PlusHeapAllocationRef(?alloc, "<<system-thread-group>>", "java.lang.ThreadGroup").

+MyMainThreadGroup(?heap, ?alloc),
  PlusHeapAllocationRef(?heap, "<<jvm-startup>>", "java.lang.String"),
  PlusHeapAllocationRef(?alloc, "<<main-thread-group>>", "java.lang.ThreadGroup").

+MyMainThread(?heap, ?alloc),
  PlusHeapAllocationRef(?heap, "<<jvm-startup>>", "java.lang.String"),
  PlusHeapAllocationRef(?alloc, "<<main-thread>>", "java.lang.Thread").
